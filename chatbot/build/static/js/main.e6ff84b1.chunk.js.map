{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["uuidv1","require","apigClient","default","newClient","invokeUrl","id","params","additionParms","users","0","1","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id_token","access_token","messages","console","log","parsed","queryString","parse","location","hash","prevState","Authorization","e","_this2","input","message","preventDefault","value","pushMessage","time","Date","getTime","out","type","unstructured","text","timestamp","invokeApi","then","res","data","catch","recipient","newMessage","Message","senderName","push","setState","_this3","react_default","a","createElement","className","lib","maxHeight","showSenderName","onSubmit","onMessageSubmit","ref","m","placeholder","Component","withRouter","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAOMA,EAASC,EAAQ,IAInBC,EAHoBD,EAAQ,IAA0BE,QAGvBC,UADtB,CAAEC,UAAW,2DAGtBC,EAAKN,IAELO,EAAS,GACTC,EAAgB,GAKdC,EAAQ,CACZC,EAAG,MACHC,EAAG,QAuBCC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,KACVC,aAAc,KACdC,SAAU,IALKV,mFAUfW,QAAQC,IAAI,cACZ,IAAIC,EAASC,IAAYC,MAAMZ,KAAKJ,MAAMiB,SAASC,MAC7CC,EAAYf,KAAKI,MACvBW,EAAUV,SAAWK,EAAOL,SAC5BU,EAAUT,aAAeI,EAAOJ,aAEhCf,EAAa,QAAc,CAACyB,cAAkBN,EAAOL,kDAGzCY,GAAG,IAAAC,EAAAlB,KACXmB,EAAQnB,KAAKoB,QAGnB,GAFAZ,QAAQC,IAAIU,GACZF,EAAEI,kBACGF,EAAMG,MACT,OAAO,EAGTtB,KAAKuB,YAAY,EAAGJ,EAAMG,OAE1B,IAAME,GAAO,IAAIC,MAAOC,UAIlBC,EAAM,CACVpB,SAAY,CACV,CACEqB,KAAQ,SACRC,aAAgB,CACdxC,GAAMA,EACNyC,KAAQX,EAAMG,MACdS,UAAaP,MAyBrB,OApBAhB,QAAQC,IAAIT,KAAKI,MAAMC,UACvBG,QAAQC,IAAIlB,GAGZ4B,EAAMG,MAAQ,GAEdrC,EAAW+C,UAAU1C,EAhFd,eAJE,OAoFkCC,EAAeoC,GACvDM,KAAK,SAACC,GACL1B,QAAQC,IAAIyB,GACZhB,EAAKK,YAAY,EAAGW,EAAIC,KAAKN,aAAaC,QACzCM,MAAM,SAACF,GACR1B,QAAQC,IAAIyB,MAST,sCAGGG,EAAWjB,GACrB,IAAML,EAAYf,KAAKI,MACjBkC,EAAa,IAAIC,UAAQ,CAC7BlD,GAAIgD,EACJjB,UACAoB,WAAYhD,EAAM6C,KAEpBtB,EAAUR,SAASkC,KAAKH,GACxBtC,KAAK0C,SAAS1C,KAAKI,wCAIZ,IAAAuC,EAAA3C,KACP,OACE4C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,WACAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,SAAD,CACEC,UAAW,IACX1C,SAAUP,KAAKI,MAAMG,SACrB2C,gBAAc,IAGhBN,EAAAC,EAAAC,cAAA,QAAMK,SAAU,SAAAlC,GAAC,OAAI0B,EAAKS,gBAAgBnC,KACxC2B,EAAAC,EAAAC,cAAA,SACEO,IAAK,SAAAC,GACHX,EAAKvB,QAAUkC,GAEjBC,YAAY,oBACZR,UAAU,4BAlGNS,aA2GHC,cAAW9D,GC7IN+D,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,uECVNC,IAASC,OACRnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACCpB,EAAAC,EAAAC,cAACmB,EAAD,OAECC,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.e6ff84b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { ChatFeed, Message, ChatBubble, BubbleGroup } from 'react-chat-ui'\nimport { withRouter } from 'react-router-dom'\n\nimport queryString from 'query-string'\n\nconst uuidv1 = require('uuid/v1');\nvar apigClientFactory = require('aws-api-gateway-client').default;\n\nvar config = { invokeUrl: 'https://bvm2azi8h1.execute-api.us-east-1.amazonaws.com' };\nvar apigClient = apigClientFactory.newClient(config);\n\nvar id = uuidv1();\nvar method = 'POST';\nvar params = {};\nvar additionParms = {\n};\nvar path = '/dev/chatbot';\n\n\nconst users = {\n  0: 'Bot',\n  1: 'User',\n};\n\nconst EXTERNAL_URL = \"https://bvm2azi8h1.execute-api.us-east-1.amazonaws.com/dev/chatbot\";\n\nconst styles = {\n  button: {\n    backgroundColor: '#fff',\n    borderColor: '#1D2129',\n    borderStyle: 'solid',\n    borderRadius: 20,\n    borderWidth: 2,\n    color: '#1D2129',\n    fontSize: 18,\n    fontWeight: '300',\n    paddingTop: 8,\n    paddingBottom: 8,\n    paddingLeft: 16,\n    paddingRight: 16,\n  },\n};\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id_token: null,\n      access_token: null,\n      messages: []\n    };\n  }\n\n  componentDidMount() {\n      console.log('I love AWS');\n      var parsed = queryString.parse(this.props.location.hash);\n      const prevState = this.state;\n      prevState.id_token = parsed.id_token;\n      prevState.access_token = parsed.access_token;\n\n      additionParms['headers'] = {'Authorization' : parsed.id_token}\n  }\n\n  onMessageSubmit(e) {\n    const input = this.message;\n    console.log(input);\n    e.preventDefault();\n    if (!input.value) {\n      return false;\n    }\n\n    this.pushMessage(0, input.value)\n\n    const time = new Date().getTime()\n\n    // find out what body it should sent\n\n    const out = {\n      \"messages\": [\n        {\n          \"type\": \"type_a\",\n          \"unstructured\": {\n            \"id\": id,\n            \"text\": input.value,\n            \"timestamp\": time\n          }\n        }\n      ]\n    }\n    console.log(this.state.id_token);\n    console.log(additionParms);\n    \n\n    input.value = '';\n\n    apigClient.invokeApi(params, path, method, additionParms, out)\n      .then((res) => {\n        console.log(res);\n        this.pushMessage(1, res.data.unstructured.text);\n      }).catch((res) => {\n        console.log(res);\n      })\n\n    // axios.post(EXTERNAL_URL, out, { headers: headers }).then(res => {\n    //   console.log(res)\n    //   this.pushMessage(1, res['unstructed']['text']);\n    // }).catch(error => {\n    //   console.log(error)\n    // })\n    return true;\n  }\n\n  pushMessage(recipient, message) {\n    const prevState = this.state;\n    const newMessage = new Message({\n      id: recipient,\n      message,\n      senderName: users[recipient]\n    })\n    prevState.messages.push(newMessage);\n    this.setState(this.state);\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-Center\">Chatbot</h1>\n        <div>\n          <ChatFeed\n            maxHeight={250}\n            messages={this.state.messages} // Boolean: list of message objects\n            showSenderName\n          />\n\n          <form onSubmit={e => this.onMessageSubmit(e)}>\n            <input\n              ref={m => {\n                this.message = m;\n              }}\n              placeholder=\"Type a message...\"\n              className=\"message-input\"\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}